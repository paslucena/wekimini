/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wekimini.gui;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;
import java.awt.Component;
import java.awt.Dimension;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.text.JTextComponent;
import wekimini.MySQLConnect;
import wekimini.SHA1Converter;
import wekimini.Wekinator;
import wekimini.osc.OSCClassificationOutput;
import wekimini.osc.OSCInputGroup;
import wekimini.osc.OSCNumericOutput;
import wekimini.osc.OSCOutput;
import wekimini.osc.OSCOutputGroup;
import wekimini.util.Util;



/**
 *
 * @author pasl
 */
public class ShareFrame extends javax.swing.JFrame {

    private final int INPUT_SELECTED = 0;
    private final int OUTPUT_SELECTED = 1;
    private final int PROJECT_SELECTED = 2;
    private String[] currentInputNames = new String[0];
    private String[] currentOutputNames = new String[0];
    private final String homeDir = System.getProperty("user.home");
    private Wekinator w;
    private final JFileChooser fc = new JFileChooser();
    private final MySQLConnect msc = new MySQLConnect();
    
    //File file;
    String path;

    /**
     * Creates new form ShareFrame
     */
    public ShareFrame() {
        initComponents();
        finishSetup();
    }
    
    public ShareFrame(Wekinator w){
        initComponents();
        finishSetup();
        this.w = w;
    }
    
    public void finishSetup(){
        inputPanel.setVisible(true);
        outputPanel.setVisible(false);
        withLabel.setVisible(false);
        nText.setVisible(false);
        classesLabel.setVisible(false);
        jLabel10.setVisible(false);
        jTextField5.setVisible(false);
        jLabel12.setVisible(false);
        jTextField7.setVisible(false);
        statusLabel1.setVisible(false);
        statusLabel2.setVisible(false);
        statusLabel3.setVisible(false);
        statusLabel4.setVisible(false);
        this.pack();
        
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox2 = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        filePanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        ctgComboBox = new javax.swing.JComboBox();
        envComboBox = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        shareButton = new javax.swing.JButton();
        inputPanel = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        fieldInputOSCMessage = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        fieldNumInputs = new javax.swing.JTextField();
        cancelButton = new javax.swing.JButton();
        outputPanel = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        fieldOutputOSCMessage = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        fieldNumOutputs = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        fieldHostName = new javax.swing.JTextField();
        fieldSendPort = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        comboOutputType = new javax.swing.JComboBox();
        withLabel = new javax.swing.JLabel();
        nText = new javax.swing.JTextField();
        classesLabel = new javax.swing.JLabel();
        sharePanel = new javax.swing.JPanel();
        typeComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        statusPanel = new javax.swing.JPanel();
        statusLabel1 = new javax.swing.JLabel();
        statusLabel2 = new javax.swing.JLabel();
        statusLabel3 = new javax.swing.JLabel();
        statusLabel4 = new javax.swing.JLabel();

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel11.setText("Description");

        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setMinimumSize(new java.awt.Dimension(614, 300));

        filePanel.setBackground(new java.awt.Color(255, 255, 255));
        filePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("File"));

        jLabel2.setText("File");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Name");

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Description");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel5.setText("Category");

        jLabel6.setText("Environment");

        ctgComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "GameController", "Sound", "Video", "Sensors", "Other" }));
        ctgComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ctgComboBoxActionPerformed(evt);
            }
        });

        envComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MaxMSP", "PD", "C++", "openFrameworks", "Processing", "Java", "Chuck", "Python", "Other" }));
        envComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                envComboBoxActionPerformed(evt);
            }
        });

        jLabel10.setText("Other:");

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jLabel12.setText("Other:");

        jTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout filePanelLayout = new javax.swing.GroupLayout(filePanel);
        filePanel.setLayout(filePanelLayout);
        filePanelLayout.setHorizontalGroup(
            filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(filePanelLayout.createSequentialGroup()
                        .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(filePanelLayout.createSequentialGroup()
                                .addComponent(jTextField1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))
                            .addComponent(jTextField2)))
                    .addGroup(filePanelLayout.createSequentialGroup()
                        .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(filePanelLayout.createSequentialGroup()
                                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(12, 12, 12))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, filePanelLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField3)
                            .addComponent(ctgComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(envComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(filePanelLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(12, 12, 12)
                        .addComponent(jTextField5))
                    .addGroup(filePanelLayout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(12, 12, 12)
                        .addComponent(jTextField7)))
                .addContainerGap())
        );
        filePanelLayout.setVerticalGroup(
            filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filePanelLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ctgComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(envComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        shareButton.setText("Share");
        shareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shareButtonActionPerformed(evt);
            }
        });

        inputPanel.setBackground(new java.awt.Color(255, 255, 255));
        inputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Input"));

        jLabel13.setText("OSC message:");

        fieldInputOSCMessage.setText("/wek/inputs");
        fieldInputOSCMessage.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldInputOSCMessageFocusLost(evt);
            }
        });
        fieldInputOSCMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldInputOSCMessageActionPerformed(evt);
            }
        });
        fieldInputOSCMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldInputOSCMessageKeyTyped(evt);
            }
        });

        jLabel14.setText("# inputs:");

        fieldNumInputs.setText("5");
        fieldNumInputs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldNumInputsKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(fieldInputOSCMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldNumInputs, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(fieldNumInputs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(fieldInputOSCMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        outputPanel.setBackground(new java.awt.Color(255, 255, 255));
        outputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));

        jLabel15.setText("OSC message:");

        fieldOutputOSCMessage.setText("/wek/outputs");
        fieldOutputOSCMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldOutputOSCMessageActionPerformed(evt);
            }
        });

        jLabel16.setText("# outputs:");

        fieldNumOutputs.setText("5");
        fieldNumOutputs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldNumOutputsActionPerformed(evt);
            }
        });
        fieldNumOutputs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldNumOutputsKeyTyped(evt);
            }
        });

        jLabel17.setText("Host (IP address or name):");

        fieldHostName.setText("localhost");

        fieldSendPort.setText("12000");
        fieldSendPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldSendPortKeyTyped(evt);
            }
        });

        jLabel18.setText("Port:");

        jLabel19.setText("Type:");

        comboOutputType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All continuous (default settings)", "All classifiers (default settings)", "Custom" }));
        comboOutputType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboOutputTypeActionPerformed(evt);
            }
        });

        withLabel.setText("With");

        nText.setText("5");
        nText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nTextActionPerformed(evt);
            }
        });

        classesLabel.setText("classes");

        javax.swing.GroupLayout outputPanelLayout = new javax.swing.GroupLayout(outputPanel);
        outputPanel.setLayout(outputPanelLayout);
        outputPanelLayout.setHorizontalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, outputPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(withLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nText, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(classesLabel)
                .addContainerGap())
            .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(outputPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(outputPanelLayout.createSequentialGroup()
                            .addComponent(jLabel15)
                            .addGap(0, 0, 0)
                            .addComponent(fieldOutputOSCMessage)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel16)
                            .addGap(0, 0, 0)
                            .addComponent(fieldNumOutputs, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(outputPanelLayout.createSequentialGroup()
                            .addComponent(jLabel17)
                            .addGap(0, 0, 0)
                            .addComponent(fieldHostName)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel18)
                            .addGap(0, 0, 0)
                            .addComponent(fieldSendPort, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(outputPanelLayout.createSequentialGroup()
                            .addComponent(jLabel19)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(comboOutputType, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 205, Short.MAX_VALUE)))
                    .addContainerGap()))
        );
        outputPanelLayout.setVerticalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, outputPanelLayout.createSequentialGroup()
                .addContainerGap(62, Short.MAX_VALUE)
                .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(withLabel)
                    .addComponent(nText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classesLabel))
                .addGap(11, 11, 11))
            .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(outputPanelLayout.createSequentialGroup()
                    .addGap(8, 8, 8)
                    .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel15)
                        .addComponent(fieldOutputOSCMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fieldNumOutputs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel16))
                    .addGap(0, 0, 0)
                    .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel17)
                        .addComponent(fieldHostName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fieldSendPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel18))
                    .addGap(0, 0, 0)
                    .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboOutputType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel19))
                    .addContainerGap(9, Short.MAX_VALUE)))
        );

        sharePanel.setBackground(new java.awt.Color(255, 255, 255));
        sharePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Share"));

        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Input", "Output", "Project" }));
        typeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Type");

        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jLabel7.setText("Username");

        jLabel8.setText("Password");

        jLabel9.setText("Don't have an account?");

        jButton2.setText("Sign Up");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sharePanelLayout = new javax.swing.GroupLayout(sharePanel);
        sharePanel.setLayout(sharePanelLayout);
        sharePanelLayout.setHorizontalGroup(
            sharePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sharePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sharePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sharePanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(typeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sharePanelLayout.createSequentialGroup()
                        .addGroup(sharePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(sharePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPasswordField1, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                            .addComponent(jTextField4)))
                    .addGroup(sharePanelLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        sharePanelLayout.setVerticalGroup(
            sharePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sharePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sharePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sharePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sharePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sharePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        statusPanel.setBackground(new java.awt.Color(255, 255, 255));

        statusLabel1.setText("Extracting information...");

        statusLabel2.setText("Zipping files together...");

        statusLabel3.setText("Sharing files...");

        statusLabel4.setText("Complete!");

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusLabel1)
                    .addComponent(statusLabel2)
                    .addComponent(statusLabel3)
                    .addComponent(statusLabel4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(inputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sharePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(statusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(shareButton))
                    .addComponent(outputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sharePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(shareButton)
                            .addComponent(cancelButton))
                        .addGap(0, 5, Short.MAX_VALUE))
                    .addComponent(statusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void typeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboBoxActionPerformed
        // TODO add your handling code here:
        int index = typeComboBox.getSelectedIndex();
        jLabel10.setVisible(false);
        jTextField5.setVisible(false);
        jLabel12.setVisible(false);
        jTextField7.setVisible(false);
        if(index == INPUT_SELECTED){
            
            String[] ctgs = {"GameController", "Sound", "Video", "Sensors" , "Other"};
            DefaultComboBoxModel cModel  = new DefaultComboBoxModel(ctgs);
            ctgComboBox.setModel(cModel);
            String[] envs = {"MaxMSP", "PD", "C++", "openFrameworks", "Processing", "Java", "Chuck", "Python", "Other"};
            DefaultComboBoxModel eModel  = new DefaultComboBoxModel(envs);
            envComboBox.setModel(eModel);
            
            outputPanel.setVisible(false);
            inputPanel.setVisible(true);
            clearTextFields();
            this.pack();
        }else if(index == OUTPUT_SELECTED){
            String[] ctgs = {"Game", "Sound", "Video", "Animation" , "Other"};
            DefaultComboBoxModel cModel  = new DefaultComboBoxModel(ctgs);
            ctgComboBox.setModel(cModel);
            String[] envs = {"MaxMSP", "PD", "C++", "openFrameworks", "Processing", "Java", "Chuck", "Python", "Arduino", "Other"};
            DefaultComboBoxModel eModel  = new DefaultComboBoxModel(envs);
            envComboBox.setModel(eModel);
            
            outputPanel.setVisible(true);
            inputPanel.setVisible(false);
            clearTextFields();
            this.pack();
        }else{
            String[] ctgs = {"Game", "Sound", "Video", "Animation" , "Other"};
            DefaultComboBoxModel cModel  = new DefaultComboBoxModel(ctgs);
            ctgComboBox.setModel(cModel);
            String[] envs = {"MaxMSP", "PD", "C++", "openFrameworks", "Processing", "Java", "Chuck", "Python", "Arduino", "Other"};
            DefaultComboBoxModel eModel  = new DefaultComboBoxModel(envs);
            envComboBox.setModel(eModel);
            outputPanel.setVisible(true);
            inputPanel.setVisible(true);
            clearTextFields();
            this.pack();
        }
    }//GEN-LAST:event_typeComboBoxActionPerformed
    
    private void clearTextFields(){
        for (Component c : filePanel.getComponents()){
            if(c instanceof JTextField){
                
                ((JTextComponent) c).setText(""); 
            }
        }
    }    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int returnVal = fc.showOpenDialog(ShareFrame.this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION){
            path = fc.getSelectedFile().getAbsolutePath();
            //file = fc.getSelectedFile();
            jTextField1.setText(path);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void fieldInputOSCMessageFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldInputOSCMessageFocusLost
        
    }//GEN-LAST:event_fieldInputOSCMessageFocusLost

    private void fieldInputOSCMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldInputOSCMessageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldInputOSCMessageActionPerformed

    private void fieldInputOSCMessageKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldInputOSCMessageKeyTyped
        /* char enter = evt.getKeyChar();

        if (enter == '\n') {
            System.out.println("One");
        } else if (enter == '\r') {
            System.out.println("two");
        } else {
            System.out.println("Other: " + enter + ".");
        }
        */
        /* if (keyIsEnter) {
            updateOSCListener();
        }*/
    }//GEN-LAST:event_fieldInputOSCMessageKeyTyped

    private void fieldNumInputsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldNumInputsKeyTyped
        char enter = evt.getKeyChar();
        if (!(Character.isDigit(enter))) {
            evt.consume();
        }
    }//GEN-LAST:event_fieldNumInputsKeyTyped

    private void fieldOutputOSCMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldOutputOSCMessageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldOutputOSCMessageActionPerformed

    private void fieldNumOutputsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldNumOutputsActionPerformed

    }//GEN-LAST:event_fieldNumOutputsActionPerformed

    private void fieldNumOutputsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldNumOutputsKeyTyped
        char enter = evt.getKeyChar();
        if (!(Character.isDigit(enter))) {
            evt.consume();
        }
    }//GEN-LAST:event_fieldNumOutputsKeyTyped

    private void fieldSendPortKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldSendPortKeyTyped
        char enter = evt.getKeyChar();
        if (!(Character.isDigit(enter))) {
            evt.consume();
        }
    }//GEN-LAST:event_fieldSendPortKeyTyped

    private void comboOutputTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboOutputTypeActionPerformed
        int index = comboOutputType.getSelectedIndex();
        if(index == 0){
            withLabel.setVisible(false);
            nText.setVisible(false);
            classesLabel.setVisible(false);
            
        }else if(index == 1){
            withLabel.setVisible(true);
            nText.setVisible(true);
            classesLabel.setVisible(true);
        }else{
            withLabel.setVisible(false);
            nText.setVisible(false);
            classesLabel.setVisible(false);
        }
    }//GEN-LAST:event_comboOutputTypeActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void nTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nTextActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void shareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shareButtonActionPerformed
        // TODO add your handling code here:
        boolean end = false;
      
        int index = typeComboBox.getSelectedIndex();
        int id = login();
        if(checkFields() && id != 0){
            statusLabel1.setVisible(true);
            System.out.println("Extracting information...");
                try{
                File i = null;
                File o = null;
                if (path == null ){
                    path = jTextField1.getText();
                    //file = new File(path);

                }
                //File desc = new File(homeDir + File.separator + "Share/description.txt");
                //PrintWriter pw = new PrintWriter(desc);
                String name = jTextField2.getText();
                String desc = jTextField3.getText();
                DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                Date date = new Date();
                String d = df.format(date);
                
                String type;
                //pw.println("Date added: "+d);
                //pw.println("Creator: "+jTextField4.getText());
                String category = ctgComboBox.getSelectedItem().toString();
                //pw.println("Category: "+category);
                String environment = envComboBox.getSelectedItem().toString();
                //pw.println("Environment: "+environment);               
                
                //filename = name + creator + date
                String filename = jTextField2.getText()+"_"+jTextField4.getText()+"_"+d;
                filename = filename.replaceAll("\\s","");
                filename = filename.replaceAll("/", "");
                System.out.println(filename);
                File file = new File(homeDir + File.separator + "Share/" + jTextField2.getText() + "Files.zip");
                zipFolder(path, file);
                File[] files = new File[3];
                files[0] = file;
                
                if (index == INPUT_SELECTED){
                    saveInputs();
                    i = new File(homeDir + File.separator + "Share/inputConfig.xml");
                    type = "Input";
                    files[1] = i;
                    
                    
                    //sendFileSFTP(jTextField2.getText() + File.separator, io);
                } else if (index == OUTPUT_SELECTED){
                    saveOutputs();
                    o = new File(homeDir + File.separator + "Share/outputConfig.xml");
                    type = "Output";
                    files[1] = o;
                    
                    //sendFileSFTP(jTextField2.getText() + File.separator, io);
                } else{
                    saveInputs();
                    saveOutputs();
                    type = "Project";
                    
                    i = new File(homeDir + File.separator + "Share/inputConfig.xml");
                    //sendFileSFTP(jTextField2.getText() + File.separator, io);
                    o = new File(homeDir + File.separator + "Share/outputConfig.xml");
                    //sendFileSFTP(jTextField2.getText() + File.separator, io);
                    files[1] = i;
                    files[2] = o;
                }
                statusLabel1.setVisible(false);
                statusLabel2.setVisible(true);
                System.out.println("Zipping files together...");
                File zipped = new File(homeDir + File.separator + "Share/" + filename + ".zip");
                zipFiles(zipped, files);
                
                //files that are inside zip file
                //sendFileSFTP(filename + File.separator, file);
                //description
                //sendFileSFTP(filename + File.separator, desc);
                //main zip file with everything
                
                msc.insert(name, desc, id, type, category, environment);
                statusLabel2.setVisible(false);
                statusLabel3.setVisible(true);
                System.out.println("Sharing files...");
                sendFileSFTP(filename + File.separator, zipped);
                
                
                statusLabel3.setVisible(false);
                statusLabel4.setVisible(true);
                System.out.println("Complete!");
                end = true;
                
                }catch (Exception e){
                    statusLabel1.setVisible(false);
                    statusLabel2.setVisible(false);
                    statusLabel3.setVisible(false);
                    statusLabel4.setVisible(false);
                    JOptionPane.showMessageDialog(ShareFrame.this, "An error occurred!");
                }
        
        }
        
        if(end){
            statusLabel4.setVisible(false);
            JOptionPane.showMessageDialog(ShareFrame.this, "Success!");
            this.dispose();
        }
        
        
        
        
        
    }//GEN-LAST:event_shareButtonActionPerformed

    
    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
         new SignUp().setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField7ActionPerformed

    private void ctgComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ctgComboBoxActionPerformed

        String x = String.valueOf(ctgComboBox.getSelectedItem());
        if(x.equals("Other")){
            jLabel10.setVisible(true);
            jTextField5.setVisible(true);
        }else{
            jLabel10.setVisible(false);
            jTextField5.setVisible(false);
        }
        packExpand();
    }//GEN-LAST:event_ctgComboBoxActionPerformed

    private void envComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_envComboBoxActionPerformed

        String x = String.valueOf(envComboBox.getSelectedItem());
        if(x.equals("Other")){
            jLabel12.setVisible(true);
            jTextField7.setVisible(true);
        }else{
            jLabel12.setVisible(false);
            jTextField7.setVisible(false);
        }
        packExpand();
    }//GEN-LAST:event_envComboBoxActionPerformed
    void packExpand()
    {
        Dimension oldDim = this.getSize();
        this.pack();
        Dimension newDim = this.getSize();
        this.setSize(oldDim.width, newDim.height);
    }
    
    private int login(){
        //boolean ok  = false;
        String name = jTextField4.getText();
        String pass = new String(jPasswordField1.getPassword());
        int id = 0;
        try{
            String hashpass = SHA1Converter.SHA1(pass);
            id = msc.login(name, hashpass);
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(ShareFrame.this, "Username/Password incorrect!");
        }
        if (id == 0){
            JOptionPane.showMessageDialog(ShareFrame.this, "Username/Password incorrect!");
        }
        return id;
    }
        
    private Boolean checkFields(){
        Boolean ok = true;
        
        if(jTextField1.getText().equals("")){
            JOptionPane.showMessageDialog(ShareFrame.this, "You must provide a file path.");
            ok = false;
        } else
        if(jTextField2.getText().equals("")){
            JOptionPane.showMessageDialog(ShareFrame.this, "Please name your file.");
            ok = false;
        } else
        if(jTextField3.getText().equals("")){
            JOptionPane.showMessageDialog(ShareFrame.this, "Please write a brief description of your file.");
            ok = false;
        } else
        if(jTextField4.getText().equals("")){
            JOptionPane.showMessageDialog(ShareFrame.this, "Please enter your username.");
            ok = false;
        } else
        if(jPasswordField1.getPassword().equals("")){
            JOptionPane.showMessageDialog(ShareFrame.this, "Please enter your password.");
            ok = false;
        }
        return ok;
    
    }
    
    static public void zipFolder(String srcFolder, File destZipFile) throws Exception {
    ZipOutputStream zip = null;
    FileOutputStream fileWriter = null;

    fileWriter = new FileOutputStream(destZipFile);
    zip = new ZipOutputStream(fileWriter);
    File folder = new File(srcFolder);
    if(folder.isDirectory()){
        addFolderToZip("", srcFolder, zip);
    }else{
        addFileToZip("", srcFolder, zip);
    }
    zip.flush();
    zip.close();
  }

  static private void addFileToZip(String path, String srcFile, ZipOutputStream zip)
      throws Exception {

    File folder = new File(srcFile);
    if (folder.isDirectory()) {
      addFolderToZip(path, srcFile, zip);
    } else {
      byte[] buf = new byte[1024];
      int len;
      FileInputStream in = new FileInputStream(srcFile);
      zip.putNextEntry(new ZipEntry(path + "/" + folder.getName()));
      while ((len = in.read(buf)) > 0) {
        zip.write(buf, 0, len);
      }
    }
  }

  static private void addFolderToZip(String path, String srcFolder, ZipOutputStream zip)
      throws Exception {
    File folder = new File(srcFolder);

    for (String fileName : folder.list()) {
      if (path.equals("")) {
        addFileToZip(folder.getName(), srcFolder + "/" + fileName, zip);
      } else {
        addFileToZip(path + "/" + folder.getName(), srcFolder + "/" + fileName, zip);
      }
    }
  }


    
    
    
    private void zipFiles(File zipFile, File[] files){
        //String zipFile = homeDir + File.separator + "Share/" + jTextField2.getText() + ".zip";
        try{
            byte[] buffer = new byte[1024];
            FileOutputStream fos = new FileOutputStream(zipFile);
            ZipOutputStream zos = new ZipOutputStream(fos);
            for(int i = 0; i < files.length; i++){
                if (files[i]!= null){
                   FileInputStream fis = new FileInputStream(files[i]);
                    zos.putNextEntry(new ZipEntry(files[i].getName()));
                    int length;
                    while((length = fis.read(buffer)) > 0){
                        zos.write(buffer, 0, length);
                    }

                    zos.closeEntry();
                    fis.close(); 
                }
                
            }
            zos.close();
            
            
            
        }catch (IOException ioe) {
            System.out.println("Error creating zip file: " + ioe);
        }

        
    }
    
    private void saveInputs() throws IOException {
        String name = "Inputs";
        String oscMessage = fieldInputOSCMessage.getText().trim();
        int numInputs = Integer.parseInt(fieldNumInputs.getText());

        if (currentInputNames.length != numInputs) {
            if (currentInputNames.length > numInputs) {
                String[] newNames = new String[numInputs];
                System.arraycopy(currentInputNames, 0, newNames, 0, numInputs);
                currentInputNames = newNames;
            } else { //We need to add some new names
                String[] newNames = new String[numInputs];
                System.arraycopy(currentInputNames, 0, newNames, 0, currentInputNames.length);
                String baseName = setBaseNameFromOscField(fieldInputOSCMessage, "Input");
                for (int i = currentInputNames.length; i < numInputs; i++) {
                    newNames[i] = baseName + "-" + (i + 1);
                }
                currentInputNames = newNames;
            }
        }
        OSCInputGroup g = new OSCInputGroup(name, oscMessage, numInputs, currentInputNames);
        //OSCInputGroup g = w.getInputManager().getOSCInputGroup();
        if (g != null) {
            g.writeToFile(homeDir + File.separator + "Share/inputConfig.xml");
        } else {
            try {
                Util.writeBlankFile(homeDir + File.separator + "Share/inputConfig.xml");
            } catch (IOException ex) {
               // logger.log(Level.WARNING, "Could not write blank file to file{0}{1}", new Object[]{projectDir, "inputConfig.xml"});
            }
        }
    }
    private String setBaseNameFromOscField(JTextField f, String defaultName) {
        String currentInputOSC = f.getText().trim();
        String baseName = defaultName;
        if (currentInputOSC.length() > 0) {
            if (!currentInputOSC.contains("/")) {
                baseName = currentInputOSC;
            } else {
                String[] s = currentInputOSC.split("/");
                if (s.length > 0 && s[s.length - 1].length() > 0) {
                    baseName = s[s.length - 1];
                }
            }
        }
        return baseName;
    }
    
    private void saveOutputs() throws IOException {
        String name = "Outputs";
        OSCOutputGroup g = null;
        String oscMessage = fieldOutputOSCMessage.getText().trim();
        String hostname = getHostnameFromForm();
        int port = getSendPortFromForm();
        int numOutputs = Integer.parseInt(fieldNumOutputs.getText());

        if (currentOutputNames.length != numOutputs) {
            if (currentOutputNames.length > numOutputs) {
                String[] newNames = new String[numOutputs];
                System.arraycopy(currentOutputNames, 0, newNames, 0, numOutputs);
                currentOutputNames = newNames;
            } else { //We need to add some new names
                String[] newNames = new String[numOutputs];
                System.arraycopy(currentOutputNames, 0, newNames, 0, currentOutputNames.length);
                String baseName = setBaseNameFromOscField(fieldOutputOSCMessage, "Output");
                for (int i = currentOutputNames.length; i < numOutputs; i++) {
                    newNames[i] = baseName + "-" + (i + 1);
                }
                currentOutputNames = newNames;
            }
        }

        if (comboOutputType.getSelectedIndex() == 1) {
            List<OSCOutput> outputs = new LinkedList<>();
            int numClasses = Integer.parseInt(nText.getText());
            for (int i = 0; i < numOutputs; i++) {
                OSCClassificationOutput o = new OSCClassificationOutput(currentOutputNames[i], numClasses);
                outputs.add(o);
            }
            g = new OSCOutputGroup(outputs, oscMessage, hostname, port);
            
        } else if (comboOutputType.getSelectedIndex() == 0) {
            List<OSCOutput> outputs = new LinkedList<>();
            for (int i = 0; i < numOutputs; i++) {
                OSCNumericOutput o = new OSCNumericOutput(
                        currentOutputNames[i],
                        0,
                        1,
                        OSCNumericOutput.NumericOutputType.REAL,
                        OSCNumericOutput.LimitType.SOFT);
                outputs.add(o);
            }
            g = new OSCOutputGroup(outputs, oscMessage, hostname, port);
            
        } else {
            //NOT WORKING FOR CUSTOM YET
            //List<OSCOutput> outputs = customConfiguredOutput.getOutputs();
            //OSCOutputGroup g = new OSCOutputGroup(outputs, oscMessage, hostname, port);
            
        }
        //OSCOutputGroup g = w.getOutputManager().getOutputGroup();
        if (g != null) {
            g.writeToFile(homeDir + File.separator + "Share/outputConfig.xml");
        } else {
            try {
                Util.writeBlankFile(homeDir + File.separator + "Share/outputConfig.xml");
            } catch (IOException ex) {
               // logger.log(Level.WARNING, "Could not write blank file to file{0}{1}", new Object[]{projectDir, inputFilename});
            }
        }
    }
    
    private String getHostnameFromForm() {
        return fieldHostName.getText().trim();
    }

    private int getSendPortFromForm() {
        return Integer.parseInt(fieldSendPort.getText());
    }
    
    private void sendFileSFTP(String folder, File file){
        String SFTPHost = "igor.gold.ac.uk";
        int SFTPPort = 22;
        String SFTPUser = "psilv001";
        String SFTPPassword = "852_PasL";
        String SFTPDir = "/home/students/psilv001/public_html/wekinator/documents/";
        
        Session session = null;
        Channel channel = null;
        ChannelSftp channelSftp = null;
        
        System.out.println(file);
        String path = SFTPDir + folder;
        System.out.println(path);
        try{
            JSch jsch = new JSch();
            session = jsch.getSession(SFTPUser,SFTPHost,SFTPPort);
            session.setPassword(SFTPPassword);
            Properties config = new Properties();
            config.put("StrictHostKeyChecking", "no");
            session.setConfig(config);
            session.connect();
            channel = session.openChannel("sftp");
            channel.connect();
            channelSftp = (ChannelSftp)channel;
            channelSftp.cd("/");
            String[] folders = path.split( "/" );
            for (String f: folders){
                if(f.length() > 0){
                    try{
                        channelSftp.cd(f);
                    }catch(SftpException e){
                        channelSftp.mkdir(f);
                        channelSftp.cd(f);
                    }  
                }               
            }            
            channelSftp.put(new FileInputStream(file), file.getName());
            
        }catch(Exception e){
            e.printStackTrace();
        }
       
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShareFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShareFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShareFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShareFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShareFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel classesLabel;
    private javax.swing.JComboBox comboOutputType;
    private javax.swing.JComboBox ctgComboBox;
    private javax.swing.JComboBox envComboBox;
    private javax.swing.JTextField fieldHostName;
    private javax.swing.JTextField fieldInputOSCMessage;
    private javax.swing.JTextField fieldNumInputs;
    private javax.swing.JTextField fieldNumOutputs;
    private javax.swing.JTextField fieldOutputOSCMessage;
    private javax.swing.JTextField fieldSendPort;
    private javax.swing.JPanel filePanel;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField nText;
    private javax.swing.JPanel outputPanel;
    private javax.swing.JButton shareButton;
    private javax.swing.JPanel sharePanel;
    private javax.swing.JLabel statusLabel1;
    private javax.swing.JLabel statusLabel2;
    private javax.swing.JLabel statusLabel3;
    private javax.swing.JLabel statusLabel4;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JComboBox typeComboBox;
    private javax.swing.JLabel withLabel;
    // End of variables declaration//GEN-END:variables
}
